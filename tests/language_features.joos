package test.joos.simple;

import java.lang.System;
import java.lang.Thread;
import java.util.*;
import System.out.println;

public interface AInterface {}

public abstract class AAbstract extends java.lang.Thread {
    public AAbstract() {
        System.out.println("AAbstract constructor call");
    }

    public abstract int IAmAbstract();
}

public class JustAClass {
    protected JustAClass() { }
}

public final class AClass extends AAbstract implements AInterface {

    public AClass() { /* super(); */}
    public AClass(int x) {}

    public static int getFortyTwo() {
        return 42;
    }
    public static int getThisFortyTwo() {
        return y;
    }
    public static int getThisWithThisFortyTwo() {
        return this.y;
    }
    public static int callFortyTwo() {
        return getFortyTwo();
    }
    public static int callFortyTwoWithThis() {
        return this.getFortyTwo();
    }
    public int getSize(java.util.Vector x) {
        return x.size();
    }
    public final int _getMonday() {
        return java.util.Calendar.MONDAY;
    }
    public void exit() {
        java.lang.System.exit();
    }
    public void make() {
        new A().x = 42;
        /* return; */
    }
    protected int m1(int x) {
        {
            int q = 42;
            return q;
        }
    }
    protected int m1(boolean x) {
        if (1 == 2) {
            return 50000000; // "that's a lot!" -Steven (2017)
        } else {
            return 87;
        }
    }
    public int m2() {
        this.m1(3);
        return this.m1(true);
    }
    public int getLength() {
        int[] x = new int[42];
        return x.length;
    }
    public int do_loop() {
        int q = 3;
        while (q > 500) {
            System.out.println("This ain't a thing!");
        }

        while (q < 5) {
            System.out.println("This is a while loop...");
            q = q + 1;
        }

        for (int i = q; i > 0; i = i - 1) {
            System.out.println("This is a for loop...");
            if (i == 1) {
                return 13;
            }
        }

        return 12;
    }
    public int[] foo() { return null; }
    public AClass returnThis() {
        java.util.Vector x = null;
        return this;
    }
    public int math(int x) {
        return -2 * x + 87 % x - (x / 7);
    }
    public boolean compare(int x) {
        return (x<87) && (x>42) && (x<=86) && (x>=43) && (x==51) && (x!=52) ;
    }
    public boolean eagerBooleans(boolean x) {
        return (x & true) | !x;
    }
    public boolean lazyBooleans(boolean x) {
        return (x && true) || x;
    }
    public String stringConcat(int x) {
        return "foo" + x + true + null;
    }
    public boolean isInstanceOfMe(Object x) {
        return x instanceof AClass;
    }
    public int cast(byte x) {
        return (int)x;
    }
    public AClass castToMe(Object x) {
        return (AClass)x;
    }

    protected static int x;
    private int y = 42;
    public int z;
    public static native int m(int i);
    public boolean a = false;
    public char b = 'a';
    public byte c;
    public short d;
    protected String e = "foo";
    protected String escaped = "\b\t\n\f\r\"\'\\\064";

}

/* This is a comment.
   // This is a nested comment.
*/
// This is another comment.
/** A Javadoc comment starts with a slash and two asterisks. */
