Start:
	BOF S EOF

Literal:
	IntegerLit
	BooleanLit
	CharacterLit
	StringLit
	NullLit

BooleanLit:
	TRUE
	FALSE

Type:
	PrimitiveType
	ReferenceType

PrimitiveType:
	BOOLEAN
	BYTE
	CHAR
	INT
	SHORT

ReferenceType:
	ClassOrInterfaceType
	ArrayType

ClassOrInterfaceType:
	Name

ClassType:
	ClassOrInterfaceType

InterfaceType:
	ClassOrInterfaceType

ArrayType:
	PrimitiveType Dim
	Name Dim

Name:
	SimpleName
	QualifiedName

SimpleName:
	IDENTIFIER

QualifiedName:
	Name DOT SimpleName

S:
	\epsilon
	TypeDeclarations
	ImportDeclarations
	ImportDeclarations TypeDeclarations
	PackageDeclaration
	PackageDeclaration TypeDeclarations
	PackageDeclaration ImportDeclarations
	PackageDeclaration ImportDeclarations TypeDeclarations

PackageDeclaration:
	PACKAGE Name SEMICOLON

ImportDeclarations:
	ImportDeclaration
	ImportDeclarations ImportDeclaration

ImportDeclaration:
	SingleImportDeclaration SEMICOLON
	StarredImportDeclaration SEMICOLON

SingleImportDeclaration:
	IMPORT Name

StarredImportDeclaration:
	IMPORT Name DOT *

TypeDeclarations:
	TypeDeclaration
	TypeDeclarations TypeDeclaration

TypeDeclaration:
	ClassDeclaration
	InterfaceDeclaration
	SEMICOLON

ClassDeclaration:
	Modifiers CLASS IDENTIFIER ClassBody
	Modifiers CLASS IDENTIFIER Implements ClassBody
	Modifiers CLASS IDENTIFIER ClassExtends ClassBody
	Modifiers CLASS IDENTIFIER ClassExtends Implements ClassBody

Modifiers:
	Inheritance
	Inheritance Absinalative
	Inheritance STATIC
	Inheritance STATIC Absinalative

Inheritance:
	PUBLIC
	PROTECTED

Absinalative:
	ABSTRACT
	FINAL
	NATIVE

ClassExtends:
	EXTENDS ClassType

Implements:
	IMPLEMENTS InterfaceTypeList

InterfaceTypeList:
	InterfaceType
	InterfaceTypeList COMMA InterfaceType

ClassBody:
	{ ClassBodyDeclarations }
	{ }

ClassBodyDeclarations:
	ClassBodyDeclaration
	ClassBodyDeclarations ClassBodyDeclaration

ClassBodyDeclaration:
	ClassMemberDeclaration
	ConstructorDeclaration

ClassMemberDeclaration:
	FieldDeclaration
	MethodDeclaration
	AbstractMethodDeclaration

FieldDeclaration:
	Modifiers Type VariableDeclarator SEMICOLON

VariableDeclarator:
	IDENTIFIER
	IDENTIFIER = Expression

MethodDeclaration:
	MethodHeader MethodBody

MethodHeader:
	Modifiers Type MethodDeclarator
	Modifiers VOID MethodDeclarator

MethodDeclarator:
	IDENTIFIER ( ParameterList )
	IDENTIFIER ( )

ParameterList:
	Parameter
	ParameterList COMMA Parameter

Parameter:
	Type IDENTIFIER
	Type IDENTIFIER Dim

MethodBody:
	Block

ConstructorDeclaration:
	Modifiers ConstructorDeclarator ConstructorBody

ConstructorDeclarator:
	SimpleName ( ParameterList )
	SimpleName ( )

ConstructorBody:
	{ }
	{ BlockStatements }

InterfaceDeclaration:
	Modifiers INTERFACE IDENTIFIER InterfaceBody
	Modifiers INTERFACE IDENTIFIER InterfaceExtends InterfaceBody

InterfaceExtends:
	EXTENDS InterfaceExtendsList

InterfaceExtendsList:
	InterfaceType
	InterfaceExtendsList COMMA InterfaceType

InterfaceBody:
	{ }
	{ InterfaceMemberDeclarations }

InterfaceMemberDeclarations:
	InterfaceMemberDeclaration
	InterfaceMemberDeclarations InterfaceMemberDeclaration

InterfaceMemberDeclaration:
	ConstantDeclaration
	AbstractMethodDeclaration

ConstantDeclaration:
	Modifiers Type IDENTIFIER = Expression SEMICOLON

AbstractMethodDeclaration:
	MethodHeader SEMICOLON

Block:
	{ }
	{ BlockStatements }

BlockStatements:
	BlockStatement
	BlockStatements BlockStatement

BlockStatement:
	LocalVariableDeclarationStatement
	Statement

LocalVariableDeclarationStatement:
	LocalVariableDeclaration SEMICOLON

LocalVariableDeclaration:
	Type VariableDeclarator

Statement:
	StatementWithoutTrailingSubstatement
	IfStatement
	IfElseStatement
	WhileStatement
	ForStatement

StatementNoShortIf:
	StatementWithoutTrailingSubstatement
	IfElseStatementNoShortIf
	WhileStatementNoShortIf
	ForStatementNoShortIf

StatementWithoutTrailingSubstatement:
	Block
	EmptyStatement
	ExpressionStatement
	ReturnStatement

EmptyStatement:
	SEMICOLON

ExpressionStatement:
	StatementExpression SEMICOLON

StatementExpression:
	Assignment
	MethodInvocation
	ClassInstanceCreationExpression

IfStatement:
	IF ( Expression ) Statement

IfElseStatement:
	IF ( Expression ) StatementNoShortIf ELSE Statement

IfElseStatementNoShortIf:
	IF ( Expression ) StatementNoShortIf ELSE StatementNoShortIf

WhileStatement:
	WHILE ( Expression ) Statement

WhileStatementNoShortIf:
	WHILE ( Expression ) StatementNoShortIf

ForStatement:
	FOR ( SEMICOLON SEMICOLON ) Statement
	FOR ( SEMICOLON SEMICOLON ForUpdate ) Statement
	FOR ( SEMICOLON Expression SEMICOLON ) Statement
	FOR ( SEMICOLON Expression SEMICOLON ForUpdate ) Statement
	FOR ( ForInit SEMICOLON SEMICOLON ) Statement
	FOR ( ForInit SEMICOLON SEMICOLON ForUpdate ) Statement
	FOR ( ForInit SEMICOLON Expression SEMICOLON ) Statement
	FOR ( ForInit SEMICOLON Expression SEMICOLON ForUpdate ) Statement

ForStatementNoShortIf:
	FOR ( SEMICOLON SEMICOLON ) StatementNoShortIf
	FOR ( SEMICOLON SEMICOLON ForUpdate ) StatementNoShortIf
	FOR ( SEMICOLON Expression SEMICOLON ) StatementNoShortIf
	FOR ( SEMICOLON Expression SEMICOLON ForUpdate ) StatementNoShortIf
	FOR ( ForInit SEMICOLON SEMICOLON ) StatementNoShortIf
	FOR ( ForInit SEMICOLON SEMICOLON ForUpdate ) StatementNoShortIf
	FOR ( ForInit SEMICOLON Expression SEMICOLON ) StatementNoShortIf
	FOR ( ForInit SEMICOLON Expression SEMICOLON ForUpdate ) StatementNoShortIf

ForInit:
	StatementExpression
	LocalVariableDeclaration

ForUpdate:
	StatementExpression

ReturnStatement:
	RETURN SEMICOLON
	RETURN Expression SEMICOLON

Primary:
	PrimaryNoNewArray
	ArrayCreationExpression

PrimaryNoNewArray:
	Literal
	THIS
	( Expression )
	ClassInstanceCreationExpression
	FieldAccess
	MethodInvocation
	ArrayAccess

ClassInstanceCreationExpression:
	NEW ClassType ( )
	NEW ClassType ( ArgumentList )

ArgumentList:
	Expression
	ArgumentList COMMA Expression

ArrayCreationExpression:
	NEW PrimitiveType Dim
	NEW PrimitiveType DimExpr
	NEW ClassOrInterfaceType Dim
	NEW ClassOrInterfaceType DimExpr

DimExpr:
	[ Expression ]

Dim:
	[ ]

FieldAccess:
	Primary DOT IDENTIFIER

MethodInvocation:
	Name ( )
	Name ( ArgumentList )
	Primary DOT IDENTIFIER ( )
	Primary DOT IDENTIFIER ( ArgumentList )

ArrayAccess:
	Name [ Expression ]
	PrimaryNoNewArray [ Expression ]

PostfixExpression:
	Primary
	Name

UnaryExpression:
	- UnaryExpression
	UnaryNoSignExpression

UnaryNoSignExpression:
	PostfixExpression
	! UnaryExpression
	CastExpression

CastExpression:
	( PrimitiveType ) UnaryExpression
	( PrimitiveType Dim ) UnaryExpression
	( Expression ) UnaryNoSignExpression
	( Name Dim ) UnaryNoSignExpression

MultiplicativeExpression:
	UnaryExpression
	MultiplicativeExpression * UnaryExpression
	MultiplicativeExpression / UnaryExpression
	MultiplicativeExpression % UnaryExpression

AdditiveExpression:
	MultiplicativeExpression
	AdditiveExpression + MultiplicativeExpression
	AdditiveExpression - MultiplicativeExpression

RelationalExpression:
	AdditiveExpression
	RelationalExpression < AdditiveExpression
	RelationalExpression > AdditiveExpression
	RelationalExpression <= AdditiveExpression
	RelationalExpression >= AdditiveExpression
	RelationalExpression INSTANCEOF ClassType

EqualityExpression:
	RelationalExpression
	EqualityExpression == RelationalExpression
	EqualityExpression != RelationalExpression

AndExpression:
	EqualityExpression
	AndExpression & EqualityExpression

ExclusiveOrExpression:
	AndExpression
	ExclusiveOrExpression ^ AndExpression

InclusiveOrExpression:
	ExclusiveOrExpression
	InclusiveOrExpression | ExclusiveOrExpression

ConditionalAndExpression:
	InclusiveOrExpression
	ConditionalAndExpression && InclusiveOrExpression

ConditionalOrExpression:
	ConditionalAndExpression
	ConditionalOrExpression || ConditionalAndExpression

AssignmentExpression:
	ConditionalOrExpression
	Assignment

Assignment:
	LeftHandSide = AssignmentExpression

LeftHandSide:
	Name
	FieldAccess
	ArrayAccess

Expression:
	AssignmentExpression
